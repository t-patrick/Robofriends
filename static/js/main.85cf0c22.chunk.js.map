{"version":3,"sources":["Components/RoboBox.js","Containers/logo.svg","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Containers/ErrorBoundary.js","Containers/App.js","reportWebVitals.js","index.js"],"names":["Hello","this","props","name","username","email","imsrc","Image","src","className","Component","CardList","robots","map","user","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","console","log","React","Children","count","children","style","overflowY","border","height","marginLeft","marginRight","ErrorBoundary","state","hasError","error","info","setState","App","onSearchChange","event","searchField","target","value","forceLoadingScreen","renderLoading","appLoaded","filtered","fetch","then","response","json","users","filter","robot","toLowerCase","includes","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"0QAgCeA,GChCA,I,4LDWD,IAAD,EAEyBC,KAAKC,MAA9BC,EAFA,EAEAA,KAAMC,EAFN,EAEMA,SAAUC,EAFhB,EAEgBA,MAEjBC,EAAQ,wBAA0BF,EAAW,gBAIjD,OALY,IAAIG,OAEVC,IAAMF,EAIR,sBAAKG,UAAU,kDAAf,UACI,qBAAKD,IAAKF,IACV,6BAAKH,IACL,6BAAKE,W,GAjBDK,cEyBLC,EA3BE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAehB,OAEI,qBAAKH,UAAU,SAAf,SAEQG,EAAOC,KAAI,SAACC,EAAMC,GACd,OAAO,cAAC,EAAD,CAASZ,KAAMS,EAAOG,GAAGZ,KAAMC,SAAUQ,EAAOG,GAAGX,SAAUC,MAAOO,EAAOG,GAAGV,cCb1FW,EATG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACjB,OACI,qBAAKR,UAAU,MAAf,SACI,uBAAOS,KAAK,SAASC,YAAY,gBAC7BC,SAAUH,OCSXI,EAbA,SAACnB,GAIZ,OAFAoB,QAAQC,IAAI,8BAA+BC,IAAMC,SAASC,MAAMxB,EAAMyB,WAIlE,qBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,QAASC,WAAY,OAAQC,YAAa,QAA/G,SACK/B,EAAMyB,YCoBJO,G,yDAzBX,WAAYhC,GAAQ,IAAD,8BACf,cAAMA,IACDiC,MAAQ,CACTC,UAAU,GAHC,E,8DAQDC,EAAOC,GACrBrC,KAAKsC,SAAU,CAAEH,UAAU,M,+BAM3B,OADmBnC,KAAKkC,MAAlBC,SAEM,iDAEDnC,KAAKC,MAAMyB,a,GAnBFH,IAAMd,YC8EnB8B,E,kDArEf,aAAe,IAAD,8BACZ,gBAkBFC,eAAiB,SAACC,GACd,EAAKH,SAAS,CAAEI,YAAaD,EAAME,OAAOC,QAEf,gBAAvBH,EAAME,OAAOC,QACf,EAAKC,oBAAqB,IAvBlB,EAkCdC,cAAgB,WACd,OAAQ,oBAAItC,UAAU,QAAd,sBAnCI,EAyCduC,UAAY,SAACC,GACX,OAAQ,sBAAKxC,UAAU,KAAf,UACR,oBAAIA,UAAU,QAAd,yBACA,cAAC,EAAD,CAAWQ,aAAc,EAAKwB,iBAC9B,cAAC,EAAD,UACE,cAAC,EAAD,UACE,cAAC,EAAD,CAAU7B,OAAQqC,YA7CtB,EAAKd,MAAQ,CACXvB,OAAQ,GACR+B,YAAa,IAEf,EAAKG,oBAAqB,EANd,E,gEASO,IAAD,OACfI,MAAM,8CACNC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJhC,QAAQC,IAAI+B,GACZ,EAAKf,SAAS,CAAE3B,OAAQ0C,S,+BAuClB,IAAD,OACDL,EAAWhD,KAAKkC,MAAMvB,OAAO2C,QAAO,SAACC,GACvC,OAAOA,EAAMrD,KAAKsD,cAAcC,SAAS,EAAKvB,MAAMQ,YAAYc,kBAEpE,OAAGxD,KAAKkC,MAAMvB,OAAO+C,OAAS,IAAiC,IAA5B1D,KAAK6C,mBAE/B7C,KAAK8C,gBAGP9C,KAAK+C,UAAUC,O,GAhERzB,IAAMd,WCETkD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBX,MAAK,YAAkD,IAA/CY,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OAAO,cAAC,EAAD,IAAQC,SAASC,eAAe,SAMhDX,M","file":"static/js/main.85cf0c22.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n// import ReactDOM from 'reactDOM';\r\nimport tachyons from 'tachyons';\r\nimport RoboBox from './RoboBox.css'\r\n\r\n\r\nclass Hello extends Component {\r\n\r\n    \r\n\r\n    // ClassName is what you need to use when used JSX.\r\n    render() {\r\n\r\n        let {name, username, email} = this.props;\r\n        var image = new Image();\r\n        let imsrc = \"https://robohash.org/\" + username + \"?size=200x200\";\r\n        image.src = imsrc;\r\n\r\n        \r\n        return (\r\n            <div className=\"bg-light-blue dib br3 ma2 pa3 grow bw3 shadow-5\"> \r\n                <img src={imsrc}></img>\r\n                <h2>{name}</h2>\r\n                <h3>{email}</h3>\r\n            </div>\r\n        )\r\n    \r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Hello;","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\r\nimport RoboBox from './RoboBox'\r\n\r\n\r\nconst CardList = ({ robots }) => {\r\n    // So in dev it will show a dev error, but the production will show the user your predefined ErrorBoundary code.\r\n    if (false) {\r\n        throw new Error(\"Oh no.\")\r\n    }\r\n    // var boxes = [];\r\n    // for(let i = 0; i < robots.length; i++) {\r\n    //     let robo = new RoboBox();\r\n    //     robo.name = robots[i].name;\r\n    //     robo.username = robots[i].username;\r\n    //     robo.email = robots[i].email;\r\n    //     boxes.push(React.createElement(robo));\r\n    // }\r\n\r\n\r\n    return (\r\n\r\n        <div className=\"dil tc\"> \r\n            {\r\n                robots.map((user, i) => {\r\n                    return <RoboBox name={robots[i].name} username={robots[i].username} email={robots[i].email}/>\r\n                })\r\n            }\r\n        </div>  \r\n    )\r\n}\r\n\r\nexport default CardList;\r\n\r\n  /* <RoboBox name={robots[0].name} username={robots[0].username} email={robots[0].email}/>\r\n        <RoboBox name={robots[1].name} username={robots[1].username} email={robots[1].email}/>\r\n        <RoboBox name={robots[2].name} username={robots[2].username} email={robots[2].email}/> */","import React from \"react\"; \r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n    return(\r\n        <div className=\"pa2\">\r\n            <input type=\"search\" placeholder=\"search robots\"\r\n                onChange={searchChange}/>            \r\n        </div>\r\n    )\r\n};\r\n\r\nexport default SearchBox;","import React from 'react'\r\n\r\nconst Scroll = (props) => {\r\n    \r\n    console.log(\"The number of children is: \", React.Children.count(props.children)); \r\n    \r\n    return (\r\n        \r\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '500px', marginLeft: '20px', marginRight: '20px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Scroll;","import { render } from '@testing-library/react';\r\nimport React from 'react'\r\n\r\nclass ErrorBoundary extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            hasError: false,        \r\n        }\r\n    }\r\n\r\n    // This lifecycle hook will run if there is an error.\r\n    componentDidCatch(error, info) {\r\n        this.setState( { hasError: true });\r\n    }\r\n\r\n    // Returns depending on hasError flag. Note this.props.children reference.\r\n    render() {\r\n        let { hasError } = this.state; \r\n        if(hasError) {\r\n            return (<h1>Oh no, an error</h1>);\r\n        } else {\r\n            return this.props.children;\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default ErrorBoundary;","import logo from './logo.svg';\r\nimport './App.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport CardList from '../Components/CardList';\r\nimport SearchBox from '../Components/SearchBox';\r\nimport Scroll from '../Components/Scroll'\r\nimport ErrorBoundary from './ErrorBoundary'\r\n\r\n\r\nclass App extends React.Component {\r\n\r\nconstructor() {\r\n  super();\r\n  this.state = {\r\n    robots: [],\r\n    searchField: '',\r\n  }\r\n  this.forceLoadingScreen = false;\r\n}\r\n\r\ncomponentDidMount() {\r\n     fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n    .then(response => response.json())\r\n    .then(users => {\r\n      console.log(users);\r\n      this.setState({ robots: users })\r\n    });\r\n\r\n  }\r\n\r\nonSearchChange = (event) => {\r\n    this.setState({ searchField: event.target.value });\r\n\r\n    if (event.target.value === 'gotoloading') {\r\n      this.forceLoadingScreen = true;\r\n    }\r\n\r\n}\r\n\r\n\r\n// One observation I have on this, is that the render() method must be rerun when the state changes.\r\n// Another is the idea that any state change must deal with it's intermediate operations before the return. Unless you directly implement it there.\r\n\r\n// // //  My different Contexts:\r\n// 1. Loading\r\nrenderLoading = () => {\r\n  return (<h1 className=\"title\">Loading</h1>);\r\n}\r\n\r\n\r\n// 2. Main Screen\r\n// ErrorBoundary \r\nappLoaded = (filtered) => {\r\n  return (<div className=\"tc\">\r\n  <h1 className=\"title\">Robofriends</h1>\r\n  <SearchBox searchChange={this.onSearchChange}/>\r\n  <Scroll>\r\n    <ErrorBoundary> \r\n      <CardList robots={filtered}/>\r\n    </ErrorBoundary>\r\n  </Scroll>\r\n</div>);\r\n}\r\n\r\n  render() {\r\n    const filtered = this.state.robots.filter((robot) => {\r\n        return robot.name.toLowerCase().includes(this.state.searchField.toLowerCase());\r\n    });\r\n    if(this.state.robots.length < 5 || this.forceLoadingScreen === true) {\r\n\r\n      return this.renderLoading();\r\n    } else {\r\n\r\n    return this.appLoaded(filtered);\r\n    }\r\n  }\r\n\r\n\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './Containers/App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(<App/>, document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}